/**
 * AST definition file 
 */

options {
	LOOKAHEAD = 4;						/** far ahead */
	CHOICE_AMBIGUITY_CHECK = 2;		
	OTHER_AMBIGUITY_CHECK = 1;
	STATIC = false;						/** don't static */
	DEBUG_PARSER = false;				/** don't debug */
	DEBUG_LOOKAHEAD = false;			/** don't debug lookaheads */
	DEBUG_TOKEN_MANAGER = false;		/** don't debug token history */
	ERROR_REPORTING = true;				/** throw exceptions */
	JAVA_UNICODE_ESCAPE = false;
	UNICODE_INPUT = false;
	IGNORE_CASE = true;					/** not case sensitive */
	USER_TOKEN_MANAGER = false;
	USER_CHAR_STREAM = false;
	BUILD_PARSER = true;
	BUILD_TOKEN_MANAGER = true;
	SANITY_CHECK = true;				/** check for insane things */
	FORCE_LA_CHECK = true;
}


PARSER_BEGIN(RSSLParser)

package net.allochie.vm.rssl.parser;
import java.util.ArrayList;
import net.allochie.vm.rssl.ast.*;
import net.allochie.vm.rssl.ast.constant.*;
import net.allochie.vm.rssl.ast.dec.*;
import net.allochie.vm.rssl.ast.expression.*;
import net.allochie.vm.rssl.ast.statement.*;


public class RSSLParser
{

}
PARSER_END(RSSLParser)


/* Skip spaces, tabs, newlines, returns and comments */
SKIP : { 
	" " | "\t" | 
	"\r\n" | "\n" | "\r" |
	"//" : WithinComment0
}

/* In comments, skip to the EOL */
<WithinComment0> SKIP : { "\r\n" : DEFAULT | "\n" : DEFAULT | "\r" : DEFAULT }
<WithinComment0> MORE : { <~[]> }

/* Token list */
TOKEN : {
	<TYPE: "type"> | 
	<EXTENDS: "extends"> | 
	<GLOBALS: "globals"> | 
	<ENDGLOBALS: "endglobals"> | 
	<CONSTANT: "constant"> | 
	<NATIVE: "native"> | 
	<TAKES: "takes"> | 
	<RETURNS: "returns"> | 
	<NOTHING: "nothing"> | 
	<FUNCTION: "function"> | 
	<ENDFUNCTION: "endfunction"> | 
	<LOCAL: "local"> | 
	<ARRAY: "array"> | 
	<SET: "set"> | 
	<CALL: "call"> | 
	
	<IF: "if"> | 
	<THEN: "then"> | 
	<ELSE: "else"> | 
	<ELSEIF: "elseif"> | 
	<ENDIF: "endif"> | 
	<LOOP: "loop"> | 
	<ENDLOOP: "endloop"> | 
	<EXITWHEN: "exitwhen"> | 
	<RETURN: "return"> | 
	<DEBUG: "debug"> |
	<HANDLE: "handle"> |
	<TRY: "try"> |
	<CATCH: "catch"> |
	<ENDTRY: "endtry"> |
	<RAISE: "raise">

}

/* Main production; creates one file with typedef, globals, 
	native_func or func entries. */
JASSFile file(): { 
	JASSFile file = new JASSFile();
	Dec tmp0; Function tmp1;
} 
{ 
	(
		tmp0 = typedef() { file.put(tmp0); } |
		tmp0 = globals() { file.put(tmp0); } |
		tmp0 = native_func() { file.put(tmp0); } |
		tmp1 = func() { file.put(tmp1); }
	) *
	{ return file; }
}

/* Type defintion: a type name and a rawtype or
	a type name and an existing type to extend */
TypeDec typedef(): { 
	TypeDec dec = new TypeDec();
	Identifier tmp0, tmp1;
	Token cp0;
}
{
	cp0 = <TYPE> { dec.where = new CodePlace(cp0); }
	tmp0 = id() { dec.id = tmp0; }
	<EXTENDS> 
	(
		tmp1 = id() { dec.typename = tmp1; }
		| 
		<HANDLE> { dec.type = DecType.HANDLE; } 
		
	) { return dec; }
}

/* A globals block */
GlobalsDec globals(): { 
	GlobalsDec dec = new GlobalsDec();
	Token cp0;
}
{
	cp0 = <GLOBALS> { dec.where = new CodePlace(cp0); }
	global_var_list(dec)
	<ENDGLOBALS> { return dec; }
}

/* A list of vars in the block */
void global_var_list(GlobalsDec dec): {
	Type tmp0;
	Identifier tmp1;
	Expression tmp2;
	VarDec tmp3;
	Token cp0;
}
{
	(
		cp0 = <CONSTANT> { dec.where = new CodePlace(cp0); tmp3 = new VarDec(); tmp3.constant = true; }
		tmp0 = type() { tmp3.type = tmp0; }
		tmp1 = id()  { tmp3.name = tmp1; }
		"="
		tmp2 = expr() { tmp3.init = tmp2; dec.put(tmp3); }
	| 
		tmp3 = var_declr() { dec.put(tmp3); }
	)*
}

/* A native function definition */
NativeFuncDef native_func(): {
	NativeFuncDef def;
	FuncDef def0;
	boolean flag0 = false;
	Token cp0;
}
{
	( <CONSTANT> { flag0 = true; } )? 
 	cp0 = <NATIVE>
 	def0 = func_declr() { def = new NativeFuncDef(def0, flag0); def.where = new CodePlace(cp0); return def; }
}

/* A function declaration */
FuncDef func_declr(): {
	FuncDef def = new FuncDef();
	Identifier tmp0; ParamList tmp1; Type tmp2;
}
{
	tmp0 = id() { def.id = tmp0; }
	<TAKES> 
	(
		<NOTHING> { def.params = new ParamList(); }
		|
		tmp1 = param_list() { def.params = tmp1; }
	) 
	<RETURNS> 
	(
		<NOTHING> { def.returns = Type.nullType; }
		| 
		tmp2 = type() { def.returns = tmp2; }
	)
	{ return def; }
}

/* A parameter list */
ParamList param_list(): {
	ParamList list = new ParamList();
	Param param0;
	Type tmp0; Identifier tmp1;
}
{
	tmp0 = type() { param0 = new Param(); param0.type = tmp0; }
	tmp1 = id() { param0.name = tmp1; list.add(param0); }
	(
		","
		tmp0 = type() { param0 = new Param(); param0.type = tmp0; }
		tmp1 = id() { param0.name = tmp1; list.add(param0); }
	)* { return list; }
}

/* A function */
Function func(): { 
	Function func = new Function();
	FuncDef tmp0; VarList tmp1; StatementList tmp2;
	Token cp0;
}
{ 
	( <CONSTANT> { func.constant = true; } )?
	cp0 = <FUNCTION> { func.where = new CodePlace(cp0); }
	tmp0 = func_declr() { func.sig = tmp0; }
	tmp1 = local_var_list() { func.lvars = tmp1; }
	tmp2 = statement_list() { func.statements = tmp2; }
	<ENDFUNCTION> { return func; }
	
}

/* A local var list */
VarList local_var_list(): {
	VarList list = new VarList();
	VarDec tmp0;
	Token cp0;
	CodePlace place;
}
{
	(
		cp0 = <LOCAL> { place = new CodePlace(cp0); } 
		tmp0 = var_declr() { tmp0.where = place; list.add(tmp0); }
	)* { return list; }
}

/* A variable definition */
VarDec var_declr(): {
	VarDec dec = new VarDec();
	Type tmp0; Identifier tmp1; Expression tmp2;
}
{
		tmp0 = type() { dec.type = tmp0; }
		tmp1 = id() { dec.name = tmp1; }
		(	
			"=" 
			tmp2 = expr() { dec.init = tmp2; }
		)? { return dec; }
	| 
		tmp0 = type() { dec.type = tmp0; }
		<ARRAY> { dec.array = true; }
		tmp1 = id() { dec.name = tmp1; return dec; }
}

/* A list of statements */
StatementList statement_list(): { 
	StatementList list = new StatementList();
	Statement tmp0;
} 
{ 
	(
		tmp0 = statement() { list.add(tmp0); }
	)* { return list; }
}

/* A single statement */
Statement statement(): {
	Statement stmt;
}
{
	stmt = set() { return stmt; } | 
	stmt = call() { return stmt; } | 
	stmt = ifthenelse() { return stmt; } | 
	stmt = trycatch() { return stmt; } |
	stmt = raise() { return stmt; } |
	stmt = loop() { return stmt; } | 
	stmt = exitwhen() { return stmt; } | 
	stmt = retn() { return stmt; } | 
	stmt = debug() { return stmt; }
	
}

/* A SET statement */
Statement set(): { 
	SetStatement setStmt; SetArrayStatement setArrStmt;
	Identifier tmp0; Expression tmp1, tmp2;
	Token cp0;
}
{
		cp0 = <SET> { setStmt = new SetStatement(); setStmt.where = new CodePlace(cp0); }
		tmp0 = id() { setStmt.id = tmp0; }
		"=" 
		tmp1 = expr() { setStmt.val = tmp1; return setStmt; } 
	| 
		cp0 = <SET> { setArrStmt = new SetArrayStatement(); setArrStmt.where = new CodePlace(cp0); }
		tmp0 = id() { setArrStmt.id = tmp0; }
		"[" 
		tmp1 = expr() { setArrStmt.idx = tmp1; }
		"]" 
		"=" 
		tmp2 = expr() { setArrStmt.val = tmp2; return setArrStmt; }
} 

/* A CALL statement */
Statement call(): { 
	CallStatement stmt;
	Identifier tmp0; ParamInvokeList tmp1;
	Token cp0;
}
{
	cp0 = <CALL> { stmt = new CallStatement(); stmt.where = new CodePlace(cp0); }
	tmp0 = id() { stmt.id = tmp0; } 
	"(" 
	(
		tmp1 = args() { stmt.params = tmp1; }
	)? 
	")" { return stmt; }
}

/* A RAISE statement */
Statement raise(): {
	RaiseStatement stmt;
	Expression tmp0;
	Token cp0;
}{
	cp0 = <RAISE> { stmt = new RaiseStatement(); stmt.where = new CodePlace(cp0); }
	tmp0 = expr() { stmt.expression = tmp0; return stmt; }
}

/* A list of passed arguments for a CALL */
ParamInvokeList args(): { 
	ParamInvokeList list = new ParamInvokeList();
	Expression tmp0;
}
{
	tmp0 = expr() { list.add(tmp0); }
	(
		"," 
		tmp0 = expr() { list.add(tmp0); }
	)* { return list; }
}

/* An if-then[-elseif][-else]-end block */
Statement ifthenelse(): {
	ConditionalStatement stmt;
	Expression tmp0; StatementList tmp1; ConditionalStatement tmp2;
	Token cp0;
}
{
	cp0 = <IF> { stmt = new ConditionalStatement(StatementType.IF); stmt.where = new CodePlace(cp0); }
	tmp0 = expr() { stmt.conditional = tmp0; }
	<THEN> 
	tmp1 = statement_list()  { stmt.statements = tmp1; } 
	(
		tmp2 = else_clause() { stmt.child = tmp2; }
	)? 
	<ENDIF> { return stmt; }
}

/* An else clause */
ConditionalStatement else_clause(): { 
	ConditionalStatement nest = new ConditionalStatement();
	Expression tmp0; StatementList tmp1; ConditionalStatement tmp2;
	Token cp0;
} 
{
		cp0 = <ELSE> { nest.type = StatementType.ELSE; nest.where = new CodePlace(cp0); }
		tmp1 = statement_list()  { nest.statements = tmp1; return nest; } 
	|
		cp0 = <ELSEIF> { nest.type = StatementType.ELSEIF; nest.where = new CodePlace(cp0); }
		tmp0 = expr() { nest.conditional = tmp0; }
		<THEN> 
		tmp1 = statement_list()  { nest.statements = tmp1; } 
		(
			tmp2 = else_clause() { nest.child = tmp2; }
		)? { return nest; }
}

/* A LOOP statement */
Statement loop(): { 
	LoopStatement stmt;
	StatementList tmp0;
	Token cp0;
}
{
	cp0 = <LOOP> { stmt = new LoopStatement(); stmt.where = new CodePlace(cp0); }
	tmp0 = statement_list() { stmt.statements = tmp0; }
	<ENDLOOP> { return stmt; }
}

/* A TRY statement */
Statement trycatch(): { 
	TryCatchStatement stmt;
	StatementList tmp0, tmp1;
	Token cp0, cp1;
}
{
	cp0 = <TRY> { stmt = new TryCatchStatement(); stmt.where = new CodePlace(cp0); }
	tmp0 = statement_list() { stmt.statements = tmp0; }
	cp1 = <CATCH> { stmt.whereCatch = new CodePlace(cp1); }
	tmp1 = statement_list() { stmt.catchStatements = tmp1; }
	<ENDTRY> { return stmt; }
}

/* An EXITWHEN statement */
Statement exitwhen(): {
	LoopExitStatement stmt; 
	Expression tmp0;
	Token cp0;
}
{
	cp0 = <EXITWHEN> { stmt = new LoopExitStatement(); stmt.where = new CodePlace(cp0); }
	tmp0 = expr() { stmt.conditional = tmp0; return stmt; }
}

/* A RETURN statement */
Statement retn(): {
	ReturnStatement stmt;
	Expression tmp0;
	Token cp0;
}
{
	cp0 = <RETURN> { stmt = new ReturnStatement(); stmt.where = new CodePlace(cp0); }
	(
		tmp0 = expr() { stmt.expression = tmp0; }
	)? { return stmt; }
}

/* A DEBUG statement */
Statement debug(): { 
	Statement rt;
	Token cp0;
}
{
	cp0 = <DEBUG>
	(
			rt = set() 
		| 
			rt = call() 
		| 
			rt = ifthenelse() 
		| 
			rt = loop()
	) { rt.debug = true; rt.debugWhere = new CodePlace(cp0);  return rt; }
}

/* An expression */
Expression expr(): {
	Expression e0;
}
{
	e0 = simple_expr()
	[
		e0 = binary_op(e0)
	]
	{ return e0; }
}

/* A simple expression component:
	a set of parens, a function call, a unary op,
	an array reference, a function reference, an
	identifier reference or a constant value only */
Expression simple_expr(): { 
	Expression exp;
	Identifier tmp0;
}
{
	exp = parens() { return exp; } | 
	exp = func_call() { return exp; } | 
	exp = unary_op() { return exp; } | 
	exp = array_ref() { return exp; } | 
	exp = func_ref() { return exp; } | 
	tmp0 = id() { return new IdentifierReference(tmp0, new CodePlace(token)); } | 
	exp = constval() { return exp; }
}

/* A binary operation */
Expression binary_op(Expression lhs): {
	BinaryOpExpression expr = new BinaryOpExpression();
	Expression tmp1;
}
{
	{ expr.lhs = lhs; }
	(
			"+"	{ expr.mode = BinaryOp.ADD; expr.where = new CodePlace(token); }
		|
			"-"	{ expr.mode = BinaryOp.SUB; expr.where = new CodePlace(token); }
		|
			"*"	{ expr.mode = BinaryOp.MUL; expr.where = new CodePlace(token); }
		|
			"/"	{ expr.mode = BinaryOp.DIV; expr.where = new CodePlace(token); }
		|
			"==" { expr.mode = BinaryOp.EQUALS; expr.where = new CodePlace(token); }
		|
			"!=" { expr.mode = BinaryOp.NOTEQUALS; expr.where = new CodePlace(token); }
		|
			">" { expr.mode = BinaryOp.LT; expr.where = new CodePlace(token); }
		|
			"<" { expr.mode = BinaryOp.GT; expr.where = new CodePlace(token); }
		|
			">=" { expr.mode = BinaryOp.LTEQ; expr.where = new CodePlace(token); }
		|
			"<=" { expr.mode = BinaryOp.GTEQ; expr.where = new CodePlace(token); }
		|
			"and" { expr.mode = BinaryOp.BOOLAND; expr.where = new CodePlace(token); }
		|
			"or" { expr.mode = BinaryOp.BOOLOR; expr.where = new CodePlace(token); }
	)
	
	tmp1 = expr() { expr.rhs = tmp1; return expr; }
}

/* A unary operation */
Expression unary_op(): {
	UnaryOpExpression expr = new UnaryOpExpression();
	Expression tmp0;
}
{
	(
			"+" { expr.mode = UnaryOp.POS; expr.where = new CodePlace(token); }
		|
			"-" { expr.mode = UnaryOp.NEG; expr.where = new CodePlace(token); }
		|
			"not" { expr.mode = UnaryOp.NOT; expr.where = new CodePlace(token); }
	) 
	tmp0 = expr() { expr.rhs = tmp0; return expr; }
}

/* A nested function call expression (tailcall-like) */
Expression func_call(): {
	FunctionCallExpression expr = new FunctionCallExpression();
	Identifier tmp0; ParamInvokeList tmp1;
}
{
	tmp0 = id() { expr.name = tmp0; expr.where = new CodePlace(token); }
	"(" 
	( 
		tmp1 = args() { expr.params = tmp1; } 
	)? 
	")" { return expr; }
}

/* An array reference expression */
Expression array_ref(): {
	ArrayReferenceExpression expr = new ArrayReferenceExpression();
	Identifier tmp0; Expression tmp1;
}
{
	tmp0 = id() { expr.name = tmp0; expr.where = new CodePlace(token); }
	"["
	tmp1 = expr() { expr.idx = tmp1; }
	"]" { return expr; }
}

/* A function reference (pointer) expression */
Expression func_ref(): {
	FunctionReferenceExpression expr = new FunctionReferenceExpression();
	Identifier tmp0;
}
{
	<FUNCTION> { expr.where = new CodePlace(token); }
	tmp0 = id() { expr.name = tmp0; return expr; }
}

/* A constant value, one of:
	an int const, a real const, a bool const,
	a string const or "null" only */
Expression constval(): {
	Constant cval;
}
{
	cval = int_const() { return cval; } | 
	cval = real_const() { return cval; } | 
	cval = bool_const() { return cval; } | 
	cval = string_const() { return cval; } | 
	"null" { return Constant.nullConst; }
}

IntConst int_const(): {
	IntConst cval;
}
{
	cval = decimal() { return cval; } | 
	cval = octal() { return cval; } | 
	cval = hex() { return cval; } | 
	cval = fourcc() { return cval; }
}

TOKEN : { <DECIMALINT: ["1"-"9"](["0"-"9"])*> }
IntConst decimal(): {
	Token inttoken;
}
{
	inttoken = <DECIMALINT> { return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.DECIMAL); }
}

TOKEN : { <OCTALINT: "0"(["0"-"7"])*> }
IntConst octal(): {
	Token inttoken;
}
{
	inttoken = <OCTALINT> { return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.OCTAL); }
}


TOKEN : { <HEXINT: "$"(["0"-"9","a"-"f","A"-"F"])+ | "0"["x","X"](["0"-"9","a"-"f","A"-"F"])+> }
IntConst hex(): {
	Token inttoken;
}
{
	inttoken = <HEXINT> { return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.HEXADECIMAL); }
}

TOKEN : { <FOURCCINT: "'" ["0"-"9","a"-"z"]["0"-"9","a"-"z"]["0"-"9","a"-"z"]["0"-"9","a"-"z"] "'"> }
IntConst fourcc(): {
	Token inttoken;
}
{
	inttoken = <FOURCCINT> { return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.FOURCC); }
}

TOKEN : { <REALCONST: (["0"-"9"])+"."(["0"-"9"])* | "."(["0"-"9"])+> }
RealConst real_const(): {
	Token realtoken;
}
{
	realtoken = <REALCONST> { return RealConst.fromToken(realtoken, new CodePlace(token)); }
}

BoolConst bool_const(): {}
{
		"true" { return BoolConst.constTrue; } 
	|
		"false"	{ return BoolConst.constFalse; }
}

TOKEN : { <STRING_LITERAL: "\"" 
		( 
			~["\"","\\","\n","\r"]
		| 
			"\\"
			( 
					["n","t","b","r","f","\\","\'","\""]
				| 
					( 
							["\n","\r"]
						| 
							"\r\n"
					)
			)
		)* 
	"\""> }
StringConst string_const(): {
	Token stringtoken;
} 
{ 
	stringtoken = <STRING_LITERAL> { return StringConst.fromToken(stringtoken, new CodePlace(token)); }
}

/* A nested expression (parens) */
Expression parens(): {
	ParenExpression expr = new ParenExpression();
	Expression tmp0;
}
{
	"(" { expr.where = new CodePlace(token); }
	tmp0 = expr() { expr.child = tmp0; }
	")" { return expr; }
}

/* A type name, one of:
	an identifying type name, code, handle,
	integer, real, boolean, string only */
Type type(): {
	Type type;
	Identifier tmp0;
}
{
	tmp0 = id() { return Type.fromIdentifier(tmp0, new CodePlace(token)); } | 
	"code" { return Type.codeType; } | 
	"handle" { return Type.handleType; } | 
	"integer" { return Type.integerType; } | 
	"real" { return Type.realType; } | 
	"boolean" { return Type.booleanType; } | 
	"string" { return Type.stringType; }
}

TOKEN : { <IDENTIFIER: ["a"-"z","A"-"Z"]((["a"-"z","A"-"Z","0"-"9","_"])* ["a"-"z","A"-"Z","0"-"9"])?> }
Identifier id(): {
	Token identoken;
}
{
	identoken = <IDENTIFIER> { return Identifier.fromToken(identoken, new CodePlace(token)); }
}
