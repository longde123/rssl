/* JASSParser.java */
/* Generated By:JavaCC: Do not edit this line. JASSParser.java */
package net.allochie.vm.jass.parser;

import net.allochie.vm.jass.ast.CodePlace;
import net.allochie.vm.jass.ast.Function;
import net.allochie.vm.jass.ast.Identifier;
import net.allochie.vm.jass.ast.JASSFile;
import net.allochie.vm.jass.ast.Param;
import net.allochie.vm.jass.ast.ParamInvokeList;
import net.allochie.vm.jass.ast.ParamList;
import net.allochie.vm.jass.ast.Statement;
import net.allochie.vm.jass.ast.StatementList;
import net.allochie.vm.jass.ast.Type;
import net.allochie.vm.jass.ast.VarList;
import net.allochie.vm.jass.ast.constant.BoolConst;
import net.allochie.vm.jass.ast.constant.Constant;
import net.allochie.vm.jass.ast.constant.IntConst;
import net.allochie.vm.jass.ast.constant.IntConstType;
import net.allochie.vm.jass.ast.constant.RealConst;
import net.allochie.vm.jass.ast.constant.StringConst;
import net.allochie.vm.jass.ast.dec.Dec;
import net.allochie.vm.jass.ast.dec.DecType;
import net.allochie.vm.jass.ast.dec.FuncDef;
import net.allochie.vm.jass.ast.dec.GlobalsDec;
import net.allochie.vm.jass.ast.dec.NativeFuncDef;
import net.allochie.vm.jass.ast.dec.TypeDec;
import net.allochie.vm.jass.ast.dec.VarDec;
import net.allochie.vm.jass.ast.expression.ArrayReferenceExpression;
import net.allochie.vm.jass.ast.expression.BinaryOp;
import net.allochie.vm.jass.ast.expression.BinaryOpExpression;
import net.allochie.vm.jass.ast.expression.Expression;
import net.allochie.vm.jass.ast.expression.FunctionCallExpression;
import net.allochie.vm.jass.ast.expression.FunctionReferenceExpression;
import net.allochie.vm.jass.ast.expression.IdentifierReference;
import net.allochie.vm.jass.ast.expression.ParenExpression;
import net.allochie.vm.jass.ast.expression.UnaryOp;
import net.allochie.vm.jass.ast.expression.UnaryOpExpression;
import net.allochie.vm.jass.ast.statement.CallStatement;
import net.allochie.vm.jass.ast.statement.ConditionalStatement;
import net.allochie.vm.jass.ast.statement.LoopExitStatement;
import net.allochie.vm.jass.ast.statement.LoopStatement;
import net.allochie.vm.jass.ast.statement.ReturnStatement;
import net.allochie.vm.jass.ast.statement.SetArrayStatement;
import net.allochie.vm.jass.ast.statement.SetStatement;
import net.allochie.vm.jass.ast.statement.StatementType;

public class JASSParser implements JASSParserConstants {

	/*
	 * Main production; creates one file with typedef, globals, native_func or
	 * func entries.
	 */
	final public JASSFile file() throws ParseException {
		JASSFile file = new JASSFile();
		Dec tmp0;
		Function tmp1;
		label_1: while (true) {
			if (jj_2_1(4))
				;
			else
				break label_1;
			if (jj_2_2(4)) {
				tmp0 = typedef();
				file.put(tmp0);
			} else if (jj_2_3(4)) {
				tmp0 = globals();
				file.put(tmp0);
			} else if (jj_2_4(4)) {
				tmp0 = native_func();
				file.put(tmp0);
			} else if (jj_2_5(4)) {
				tmp1 = func();
				file.put(tmp1);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return file;
		}
		throw new Error("Missing return statement in function");
	}

	/*
	 * Type defintion: a type name and a rawtype or a type name and an existing
	 * type to extend
	 */
	final public TypeDec typedef() throws ParseException {
		TypeDec dec = new TypeDec();
		Identifier tmp0, tmp1;
		Token cp0;
		cp0 = jj_consume_token(TYPE);
		dec.where = new CodePlace(cp0);
		tmp0 = id();
		dec.id = tmp0;
		jj_consume_token(EXTENDS);
		if (jj_2_6(4)) {
			tmp1 = id();
			dec.typename = tmp1;
		} else if (jj_2_7(4)) {
			jj_consume_token(HANDLE);
			dec.type = DecType.HANDLE;
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return dec;
		}
		throw new Error("Missing return statement in function");
	}

	/* A globals block */
	final public GlobalsDec globals() throws ParseException {
		GlobalsDec dec = new GlobalsDec();
		Token cp0;
		cp0 = jj_consume_token(GLOBALS);
		dec.where = new CodePlace(cp0);
		global_var_list(dec);
		jj_consume_token(ENDGLOBALS);
		{
			if ("" != null)
				return dec;
		}
		throw new Error("Missing return statement in function");
	}

	/* A list of vars in the block */
	final public void global_var_list(GlobalsDec dec) throws ParseException {
		Type tmp0;
		Identifier tmp1;
		Expression tmp2;
		VarDec tmp3;
		Token cp0;
		label_2: while (true) {
			if (jj_2_8(4))
				;
			else
				break label_2;
			if (jj_2_9(4)) {
				cp0 = jj_consume_token(CONSTANT);
				dec.where = new CodePlace(cp0);
				tmp3 = new VarDec();
				tmp3.constant = true;
				tmp0 = type();
				tmp3.type = tmp0;
				tmp1 = id();
				tmp3.name = tmp1;
				jj_consume_token(37);
				tmp2 = expr();
				tmp3.init = tmp2;
				dec.put(tmp3);
			} else if (jj_2_10(4)) {
				tmp3 = var_declr();
				dec.put(tmp3);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	/* A native function definition */
	final public NativeFuncDef native_func() throws ParseException {
		NativeFuncDef def;
		FuncDef def0;
		boolean flag0 = false;
		Token cp0;
		if (jj_2_11(4)) {
			jj_consume_token(CONSTANT);
			flag0 = true;
		} else
			;
		cp0 = jj_consume_token(NATIVE);
		def0 = func_declr();
		def = new NativeFuncDef(def0, flag0);
		def.where = new CodePlace(cp0);
		{
			if ("" != null)
				return def;
		}
		throw new Error("Missing return statement in function");
	}

	/* A function declaration */
	final public FuncDef func_declr() throws ParseException {
		FuncDef def = new FuncDef();
		Identifier tmp0;
		ParamList tmp1;
		Type tmp2;
		tmp0 = id();
		def.id = tmp0;
		jj_consume_token(TAKES);
		if (jj_2_12(4)) {
			jj_consume_token(NOTHING);
			def.params = new ParamList();
		} else if (jj_2_13(4)) {
			tmp1 = param_list();
			def.params = tmp1;
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		jj_consume_token(RETURNS);
		if (jj_2_14(4)) {
			jj_consume_token(NOTHING);
			def.returns = Type.nullType;
		} else if (jj_2_15(4)) {
			tmp2 = type();
			def.returns = tmp2;
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return def;
		}
		throw new Error("Missing return statement in function");
	}

	/* A parameter list */
	final public ParamList param_list() throws ParseException {
		ParamList list = new ParamList();
		Param param0;
		Type tmp0;
		Identifier tmp1;
		tmp0 = type();
		param0 = new Param();
		param0.type = tmp0;
		tmp1 = id();
		param0.name = tmp1;
		list.add(param0);
		label_3: while (true) {
			if (jj_2_16(4))
				;
			else
				break label_3;
			jj_consume_token(38);
			tmp0 = type();
			param0 = new Param();
			param0.type = tmp0;
			tmp1 = id();
			param0.name = tmp1;
			list.add(param0);
		}
		{
			if ("" != null)
				return list;
		}
		throw new Error("Missing return statement in function");
	}

	/* A function */
	final public Function func() throws ParseException {
		Function func = new Function();
		FuncDef tmp0;
		VarList tmp1;
		StatementList tmp2;
		Token cp0;
		if (jj_2_17(4)) {
			jj_consume_token(CONSTANT);
			func.constant = true;
		} else
			;
		cp0 = jj_consume_token(FUNCTION);
		func.where = new CodePlace(cp0);
		tmp0 = func_declr();
		func.sig = tmp0;
		tmp1 = local_var_list();
		func.lvars = tmp1;
		tmp2 = statement_list();
		func.statements = tmp2;
		jj_consume_token(ENDFUNCTION);
		{
			if ("" != null)
				return func;
		}
		throw new Error("Missing return statement in function");
	}

	/* A local var list */
	final public VarList local_var_list() throws ParseException {
		VarList list = new VarList();
		VarDec tmp0;
		Token cp0;
		CodePlace place;
		label_4: while (true) {
			if (jj_2_18(4))
				;
			else
				break label_4;
			cp0 = jj_consume_token(LOCAL);
			place = new CodePlace(cp0);
			tmp0 = var_declr();
			tmp0.where = place;
			list.add(tmp0);
		}
		{
			if ("" != null)
				return list;
		}
		throw new Error("Missing return statement in function");
	}

	/* A variable definition */
	final public VarDec var_declr() throws ParseException {
		VarDec dec = new VarDec();
		Type tmp0;
		Identifier tmp1;
		Expression tmp2;
		if (jj_2_20(4)) {
			tmp0 = type();
			dec.type = tmp0;
			tmp1 = id();
			dec.name = tmp1;
			if (jj_2_19(4)) {
				jj_consume_token(37);
				tmp2 = expr();
				dec.init = tmp2;
			} else
				;
			{
				if ("" != null)
					return dec;
			}
		} else if (jj_2_21(4)) {
			tmp0 = type();
			dec.type = tmp0;
			jj_consume_token(ARRAY);
			dec.array = true;
			tmp1 = id();
			dec.name = tmp1;
			{
				if ("" != null)
					return dec;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/* A list of statements */
	final public StatementList statement_list() throws ParseException {
		StatementList list = new StatementList();
		Statement tmp0;
		label_5: while (true) {
			if (jj_2_22(4))
				;
			else
				break label_5;
			tmp0 = statement();
			list.add(tmp0);
		}
		{
			if ("" != null)
				return list;
		}
		throw new Error("Missing return statement in function");
	}

	/* A single statement */
	final public Statement statement() throws ParseException {
		Statement stmt;
		if (jj_2_23(4)) {
			stmt = set();
			{
				if ("" != null)
					return stmt;
			}
		} else if (jj_2_24(4)) {
			stmt = call();
			{
				if ("" != null)
					return stmt;
			}
		} else if (jj_2_25(4)) {
			stmt = ifthenelse();
			{
				if ("" != null)
					return stmt;
			}
		} else if (jj_2_26(4)) {
			stmt = loop();
			{
				if ("" != null)
					return stmt;
			}
		} else if (jj_2_27(4)) {
			stmt = exitwhen();
			{
				if ("" != null)
					return stmt;
			}
		} else if (jj_2_28(4)) {
			stmt = retn();
			{
				if ("" != null)
					return stmt;
			}
		} else if (jj_2_29(4)) {
			stmt = debug();
			{
				if ("" != null)
					return stmt;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/* A SET statement */
	final public Statement set() throws ParseException {
		SetStatement setStmt;
		SetArrayStatement setArrStmt;
		Identifier tmp0;
		Expression tmp1, tmp2;
		Token cp0;
		if (jj_2_30(4)) {
			cp0 = jj_consume_token(SET);
			setStmt = new SetStatement();
			setStmt.where = new CodePlace(cp0);
			tmp0 = id();
			setStmt.id = tmp0;
			jj_consume_token(37);
			tmp1 = expr();
			setStmt.val = tmp1;
			{
				if ("" != null)
					return setStmt;
			}
		} else if (jj_2_31(4)) {
			cp0 = jj_consume_token(SET);
			setArrStmt = new SetArrayStatement();
			setArrStmt.where = new CodePlace(cp0);
			tmp0 = id();
			setArrStmt.id = tmp0;
			jj_consume_token(39);
			tmp1 = expr();
			setArrStmt.idx = tmp1;
			jj_consume_token(40);
			jj_consume_token(37);
			tmp2 = expr();
			setArrStmt.val = tmp2;
			{
				if ("" != null)
					return setArrStmt;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/* A CALL statement */
	final public Statement call() throws ParseException {
		CallStatement stmt;
		Identifier tmp0;
		ParamInvokeList tmp1;
		Token cp0;
		cp0 = jj_consume_token(CALL);
		stmt = new CallStatement();
		stmt.where = new CodePlace(cp0);
		tmp0 = id();
		stmt.id = tmp0;
		jj_consume_token(41);
		if (jj_2_32(4)) {
			tmp1 = args();
			stmt.params = tmp1;
		} else
			;
		jj_consume_token(42);
		{
			if ("" != null)
				return stmt;
		}
		throw new Error("Missing return statement in function");
	}

	/* A list of passed arguments for a CALL */
	final public ParamInvokeList args() throws ParseException {
		ParamInvokeList list = new ParamInvokeList();
		Expression tmp0;
		tmp0 = expr();
		list.add(tmp0);
		label_6: while (true) {
			if (jj_2_33(4))
				;
			else
				break label_6;
			jj_consume_token(38);
			tmp0 = expr();
			list.add(tmp0);
		}
		{
			if ("" != null)
				return list;
		}
		throw new Error("Missing return statement in function");
	}

	/* An if-then[-elseif][-else]-end block */
	final public Statement ifthenelse() throws ParseException {
		ConditionalStatement stmt;
		Expression tmp0;
		StatementList tmp1;
		ConditionalStatement tmp2;
		Token cp0;
		cp0 = jj_consume_token(IF);
		stmt = new ConditionalStatement(StatementType.IF);
		stmt.where = new CodePlace(cp0);
		tmp0 = expr();
		stmt.conditional = tmp0;
		jj_consume_token(THEN);
		tmp1 = statement_list();
		stmt.statements = tmp1;
		if (jj_2_34(4)) {
			tmp2 = else_clause();
			stmt.child = tmp2;
		} else
			;
		jj_consume_token(ENDIF);
		{
			if ("" != null)
				return stmt;
		}
		throw new Error("Missing return statement in function");
	}

	/* An else clause */
	final public ConditionalStatement else_clause() throws ParseException {
		ConditionalStatement nest = new ConditionalStatement();
		Expression tmp0;
		StatementList tmp1;
		ConditionalStatement tmp2;
		Token cp0;
		if (jj_2_36(4)) {
			cp0 = jj_consume_token(ELSE);
			nest.type = StatementType.ELSE;
			nest.where = new CodePlace(cp0);
			tmp1 = statement_list();
			nest.statements = tmp1;
			{
				if ("" != null)
					return nest;
			}
		} else if (jj_2_37(4)) {
			cp0 = jj_consume_token(ELSEIF);
			nest.type = StatementType.ELSEIF;
			nest.where = new CodePlace(cp0);
			tmp0 = expr();
			nest.conditional = tmp0;
			jj_consume_token(THEN);
			tmp1 = statement_list();
			nest.statements = tmp1;
			if (jj_2_35(4)) {
				tmp2 = else_clause();
				nest.child = tmp2;
			} else
				;
			{
				if ("" != null)
					return nest;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/* A LOOP statement */
	final public Statement loop() throws ParseException {
		LoopStatement stmt;
		StatementList tmp0;
		Token cp0;
		cp0 = jj_consume_token(LOOP);
		stmt = new LoopStatement();
		stmt.where = new CodePlace(cp0);
		tmp0 = statement_list();
		stmt.statements = tmp0;
		jj_consume_token(ENDLOOP);
		{
			if ("" != null)
				return stmt;
		}
		throw new Error("Missing return statement in function");
	}

	/* An EXITWHEN statement */
	final public Statement exitwhen() throws ParseException {
		LoopExitStatement stmt;
		Expression tmp0;
		Token cp0;
		cp0 = jj_consume_token(EXITWHEN);
		stmt = new LoopExitStatement();
		stmt.where = new CodePlace(cp0);
		tmp0 = expr();
		stmt.conditional = tmp0;
		{
			if ("" != null)
				return stmt;
		}
		throw new Error("Missing return statement in function");
	}

	/* A RETURN statement */
	final public Statement retn() throws ParseException {
		ReturnStatement stmt;
		Expression tmp0;
		Token cp0;
		cp0 = jj_consume_token(RETURN);
		stmt = new ReturnStatement();
		stmt.where = new CodePlace(cp0);
		if (jj_2_38(4)) {
			tmp0 = expr();
			stmt.expression = tmp0;
		} else
			;
		{
			if ("" != null)
				return stmt;
		}
		throw new Error("Missing return statement in function");
	}

	/* A DEBUG statement */
	final public Statement debug() throws ParseException {
		Statement rt;
		Token cp0;
		cp0 = jj_consume_token(DEBUG);
		if (jj_2_39(4))
			rt = set();
		else if (jj_2_40(4))
			rt = call();
		else if (jj_2_41(4))
			rt = ifthenelse();
		else if (jj_2_42(4))
			rt = loop();
		else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		rt.debug = true;
		rt.debugWhere = new CodePlace(cp0);
		{
			if ("" != null)
				return rt;
		}
		throw new Error("Missing return statement in function");
	}

	/* An expression */
	final public Expression expr() throws ParseException {
		Expression e0;
		e0 = simple_expr();
		if (jj_2_43(4))
			e0 = binary_op(e0);
		else
			;
		{
			if ("" != null)
				return e0;
		}
		throw new Error("Missing return statement in function");
	}

	/*
	 * A simple expression component: a set of parens, a function call, a unary
	 * op, an array reference, a function reference, an identifier reference or
	 * a constant value only
	 */
	final public Expression simple_expr() throws ParseException {
		Expression exp;
		Identifier tmp0;
		if (jj_2_44(4)) {
			exp = parens();
			{
				if ("" != null)
					return exp;
			}
		} else if (jj_2_45(4)) {
			exp = func_call();
			{
				if ("" != null)
					return exp;
			}
		} else if (jj_2_46(4)) {
			exp = unary_op();
			{
				if ("" != null)
					return exp;
			}
		} else if (jj_2_47(4)) {
			exp = array_ref();
			{
				if ("" != null)
					return exp;
			}
		} else if (jj_2_48(4)) {
			exp = func_ref();
			{
				if ("" != null)
					return exp;
			}
		} else if (jj_2_49(4)) {
			tmp0 = id();
			{
				if ("" != null)
					return new IdentifierReference(tmp0, new CodePlace(token));
			}
		} else if (jj_2_50(4)) {
			exp = constval();
			{
				if ("" != null)
					return exp;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/* A binary operation */
	final public Expression binary_op(Expression lhs) throws ParseException {
		BinaryOpExpression expr = new BinaryOpExpression();
		Expression tmp1;
		expr.lhs = lhs;
		if (jj_2_51(4)) {
			jj_consume_token(43);
			expr.mode = BinaryOp.ADD;
			expr.where = new CodePlace(token);
		} else if (jj_2_52(4)) {
			jj_consume_token(44);
			expr.mode = BinaryOp.SUB;
			expr.where = new CodePlace(token);
		} else if (jj_2_53(4)) {
			jj_consume_token(45);
			expr.mode = BinaryOp.MUL;
			expr.where = new CodePlace(token);
		} else if (jj_2_54(4)) {
			jj_consume_token(46);
			expr.mode = BinaryOp.DIV;
			expr.where = new CodePlace(token);
		} else if (jj_2_55(4)) {
			jj_consume_token(47);
			expr.mode = BinaryOp.EQUALS;
			expr.where = new CodePlace(token);
		} else if (jj_2_56(4)) {
			jj_consume_token(48);
			expr.mode = BinaryOp.NOTEQUALS;
			expr.where = new CodePlace(token);
		} else if (jj_2_57(4)) {
			jj_consume_token(49);
			expr.mode = BinaryOp.LT;
			expr.where = new CodePlace(token);
		} else if (jj_2_58(4)) {
			jj_consume_token(50);
			expr.mode = BinaryOp.GT;
			expr.where = new CodePlace(token);
		} else if (jj_2_59(4)) {
			jj_consume_token(51);
			expr.mode = BinaryOp.LTEQ;
			expr.where = new CodePlace(token);
		} else if (jj_2_60(4)) {
			jj_consume_token(52);
			expr.mode = BinaryOp.GTEQ;
			expr.where = new CodePlace(token);
		} else if (jj_2_61(4)) {
			jj_consume_token(53);
			expr.mode = BinaryOp.BOOLAND;
			expr.where = new CodePlace(token);
		} else if (jj_2_62(4)) {
			jj_consume_token(54);
			expr.mode = BinaryOp.BOOLOR;
			expr.where = new CodePlace(token);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		tmp1 = expr();
		expr.rhs = tmp1;
		{
			if ("" != null)
				return expr;
		}
		throw new Error("Missing return statement in function");
	}

	/* A unary operation */
	final public Expression unary_op() throws ParseException {
		UnaryOpExpression expr = new UnaryOpExpression();
		Expression tmp0;
		if (jj_2_63(4)) {
			jj_consume_token(43);
			expr.mode = UnaryOp.POS;
			expr.where = new CodePlace(token);
		} else if (jj_2_64(4)) {
			jj_consume_token(44);
			expr.mode = UnaryOp.NEG;
			expr.where = new CodePlace(token);
		} else if (jj_2_65(4)) {
			jj_consume_token(55);
			expr.mode = UnaryOp.NOT;
			expr.where = new CodePlace(token);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		tmp0 = expr();
		expr.rhs = tmp0;
		{
			if ("" != null)
				return expr;
		}
		throw new Error("Missing return statement in function");
	}

	/* A nested function call expression (tailcall-like) */
	final public Expression func_call() throws ParseException {
		FunctionCallExpression expr = new FunctionCallExpression();
		Identifier tmp0;
		ParamInvokeList tmp1;
		tmp0 = id();
		expr.name = tmp0;
		expr.where = new CodePlace(token);
		jj_consume_token(41);
		if (jj_2_66(4)) {
			tmp1 = args();
			expr.params = tmp1;
		} else
			;
		jj_consume_token(42);
		{
			if ("" != null)
				return expr;
		}
		throw new Error("Missing return statement in function");
	}

	/* An array reference expression */
	final public Expression array_ref() throws ParseException {
		ArrayReferenceExpression expr = new ArrayReferenceExpression();
		Identifier tmp0;
		Expression tmp1;
		tmp0 = id();
		expr.name = tmp0;
		expr.where = new CodePlace(token);
		jj_consume_token(39);
		tmp1 = expr();
		expr.idx = tmp1;
		jj_consume_token(40);
		{
			if ("" != null)
				return expr;
		}
		throw new Error("Missing return statement in function");
	}

	/* A function reference (pointer) expression */
	final public Expression func_ref() throws ParseException {
		FunctionReferenceExpression expr = new FunctionReferenceExpression();
		Identifier tmp0;
		jj_consume_token(FUNCTION);
		expr.where = new CodePlace(token);
		tmp0 = id();
		expr.name = tmp0;
		{
			if ("" != null)
				return expr;
		}
		throw new Error("Missing return statement in function");
	}

	/*
	 * A constant value, one of: an int const, a real const, a bool const, a
	 * string const or "null" only
	 */
	final public Expression constval() throws ParseException {
		Constant cval;
		if (jj_2_67(4)) {
			cval = int_const();
			{
				if ("" != null)
					return cval;
			}
		} else if (jj_2_68(4)) {
			cval = real_const();
			{
				if ("" != null)
					return cval;
			}
		} else if (jj_2_69(4)) {
			cval = bool_const();
			{
				if ("" != null)
					return cval;
			}
		} else if (jj_2_70(4)) {
			cval = string_const();
			{
				if ("" != null)
					return cval;
			}
		} else if (jj_2_71(4)) {
			jj_consume_token(56);
			{
				if ("" != null)
					return Constant.nullConst;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public IntConst int_const() throws ParseException {
		IntConst cval;
		if (jj_2_72(4)) {
			cval = decimal();
			{
				if ("" != null)
					return cval;
			}
		} else if (jj_2_73(4)) {
			cval = octal();
			{
				if ("" != null)
					return cval;
			}
		} else if (jj_2_74(4)) {
			cval = hex();
			{
				if ("" != null)
					return cval;
			}
		} else if (jj_2_75(4)) {
			cval = fourcc();
			{
				if ("" != null)
					return cval;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public IntConst decimal() throws ParseException {
		Token inttoken;
		inttoken = jj_consume_token(DECIMALINT);
		{
			if ("" != null)
				return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.DECIMAL);
		}
		throw new Error("Missing return statement in function");
	}

	final public IntConst octal() throws ParseException {
		Token inttoken;
		inttoken = jj_consume_token(OCTALINT);
		{
			if ("" != null)
				return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.OCTAL);
		}
		throw new Error("Missing return statement in function");
	}

	final public IntConst hex() throws ParseException {
		Token inttoken;
		inttoken = jj_consume_token(HEXINT);
		{
			if ("" != null)
				return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.HEXADECIMAL);
		}
		throw new Error("Missing return statement in function");
	}

	final public IntConst fourcc() throws ParseException {
		Token inttoken;
		inttoken = jj_consume_token(FOURCCINT);
		{
			if ("" != null)
				return IntConst.fromToken(inttoken, new CodePlace(token), IntConstType.FOURCC);
		}
		throw new Error("Missing return statement in function");
	}

	final public RealConst real_const() throws ParseException {
		Token realtoken;
		realtoken = jj_consume_token(REALCONST);
		{
			if ("" != null)
				return RealConst.fromToken(realtoken, new CodePlace(token));
		}
		throw new Error("Missing return statement in function");
	}

	final public BoolConst bool_const() throws ParseException {
		if (jj_2_76(4)) {
			jj_consume_token(62);
			{
				if ("" != null)
					return BoolConst.constTrue;
			}
		} else if (jj_2_77(4)) {
			jj_consume_token(63);
			{
				if ("" != null)
					return BoolConst.constFalse;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public StringConst string_const() throws ParseException {
		Token stringtoken;
		stringtoken = jj_consume_token(STRING_LITERAL);
		{
			if ("" != null)
				return StringConst.fromToken(stringtoken, new CodePlace(token));
		}
		throw new Error("Missing return statement in function");
	}

	/* A nested expression (parens) */
	final public Expression parens() throws ParseException {
		ParenExpression expr = new ParenExpression();
		Expression tmp0;
		jj_consume_token(41);
		expr.where = new CodePlace(token);
		tmp0 = expr();
		expr.child = tmp0;
		jj_consume_token(42);
		{
			if ("" != null)
				return expr;
		}
		throw new Error("Missing return statement in function");
	}

	/*
	 * A type name, one of: an identifying type name, code, handle, integer,
	 * real, boolean, string only
	 */
	final public Type type() throws ParseException {
		Type type;
		Identifier tmp0;
		if (jj_2_78(4)) {
			tmp0 = id();
			{
				if ("" != null)
					return Type.fromIdentifier(tmp0, new CodePlace(token));
			}
		} else if (jj_2_79(4)) {
			jj_consume_token(65);
			{
				if ("" != null)
					return Type.codeType;
			}
		} else if (jj_2_80(4)) {
			jj_consume_token(HANDLE);
			{
				if ("" != null)
					return Type.handleType;
			}
		} else if (jj_2_81(4)) {
			jj_consume_token(66);
			{
				if ("" != null)
					return Type.integerType;
			}
		} else if (jj_2_82(4)) {
			jj_consume_token(67);
			{
				if ("" != null)
					return Type.realType;
			}
		} else if (jj_2_83(4)) {
			jj_consume_token(68);
			{
				if ("" != null)
					return Type.booleanType;
			}
		} else if (jj_2_84(4)) {
			jj_consume_token(69);
			{
				if ("" != null)
					return Type.stringType;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public Identifier id() throws ParseException {
		Token identoken;
		identoken = jj_consume_token(IDENTIFIER);
		{
			if ("" != null)
				return Identifier.fromToken(identoken, new CodePlace(token));
		}
		throw new Error("Missing return statement in function");
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(14, xla);
		}
	}

	private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(15, xla);
		}
	}

	private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_17();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(16, xla);
		}
	}

	private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_18();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(17, xla);
		}
	}

	private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_19();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(18, xla);
		}
	}

	private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_20();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(19, xla);
		}
	}

	private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_21();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(20, xla);
		}
	}

	private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_22();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(21, xla);
		}
	}

	private boolean jj_2_23(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_23();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(22, xla);
		}
	}

	private boolean jj_2_24(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_24();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(23, xla);
		}
	}

	private boolean jj_2_25(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_25();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(24, xla);
		}
	}

	private boolean jj_2_26(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_26();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(25, xla);
		}
	}

	private boolean jj_2_27(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_27();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(26, xla);
		}
	}

	private boolean jj_2_28(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_28();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(27, xla);
		}
	}

	private boolean jj_2_29(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_29();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(28, xla);
		}
	}

	private boolean jj_2_30(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_30();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(29, xla);
		}
	}

	private boolean jj_2_31(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_31();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(30, xla);
		}
	}

	private boolean jj_2_32(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_32();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(31, xla);
		}
	}

	private boolean jj_2_33(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_33();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(32, xla);
		}
	}

	private boolean jj_2_34(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_34();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(33, xla);
		}
	}

	private boolean jj_2_35(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_35();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(34, xla);
		}
	}

	private boolean jj_2_36(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_36();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(35, xla);
		}
	}

	private boolean jj_2_37(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_37();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(36, xla);
		}
	}

	private boolean jj_2_38(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_38();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(37, xla);
		}
	}

	private boolean jj_2_39(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_39();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(38, xla);
		}
	}

	private boolean jj_2_40(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_40();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(39, xla);
		}
	}

	private boolean jj_2_41(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_41();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(40, xla);
		}
	}

	private boolean jj_2_42(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_42();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(41, xla);
		}
	}

	private boolean jj_2_43(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_43();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(42, xla);
		}
	}

	private boolean jj_2_44(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_44();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(43, xla);
		}
	}

	private boolean jj_2_45(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_45();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(44, xla);
		}
	}

	private boolean jj_2_46(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_46();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(45, xla);
		}
	}

	private boolean jj_2_47(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_47();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(46, xla);
		}
	}

	private boolean jj_2_48(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_48();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(47, xla);
		}
	}

	private boolean jj_2_49(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_49();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(48, xla);
		}
	}

	private boolean jj_2_50(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_50();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(49, xla);
		}
	}

	private boolean jj_2_51(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_51();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(50, xla);
		}
	}

	private boolean jj_2_52(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_52();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(51, xla);
		}
	}

	private boolean jj_2_53(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_53();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(52, xla);
		}
	}

	private boolean jj_2_54(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_54();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(53, xla);
		}
	}

	private boolean jj_2_55(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_55();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(54, xla);
		}
	}

	private boolean jj_2_56(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_56();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(55, xla);
		}
	}

	private boolean jj_2_57(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_57();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(56, xla);
		}
	}

	private boolean jj_2_58(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_58();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(57, xla);
		}
	}

	private boolean jj_2_59(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_59();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(58, xla);
		}
	}

	private boolean jj_2_60(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_60();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(59, xla);
		}
	}

	private boolean jj_2_61(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_61();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(60, xla);
		}
	}

	private boolean jj_2_62(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_62();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(61, xla);
		}
	}

	private boolean jj_2_63(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_63();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(62, xla);
		}
	}

	private boolean jj_2_64(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_64();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(63, xla);
		}
	}

	private boolean jj_2_65(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_65();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(64, xla);
		}
	}

	private boolean jj_2_66(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_66();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(65, xla);
		}
	}

	private boolean jj_2_67(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_67();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(66, xla);
		}
	}

	private boolean jj_2_68(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_68();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(67, xla);
		}
	}

	private boolean jj_2_69(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_69();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(68, xla);
		}
	}

	private boolean jj_2_70(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_70();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(69, xla);
		}
	}

	private boolean jj_2_71(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_71();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(70, xla);
		}
	}

	private boolean jj_2_72(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_72();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(71, xla);
		}
	}

	private boolean jj_2_73(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_73();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(72, xla);
		}
	}

	private boolean jj_2_74(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_74();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(73, xla);
		}
	}

	private boolean jj_2_75(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_75();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(74, xla);
		}
	}

	private boolean jj_2_76(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_76();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(75, xla);
		}
	}

	private boolean jj_2_77(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_77();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(76, xla);
		}
	}

	private boolean jj_2_78(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_78();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(77, xla);
		}
	}

	private boolean jj_2_79(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_79();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(78, xla);
		}
	}

	private boolean jj_2_80(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_80();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(79, xla);
		}
	}

	private boolean jj_2_81(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_81();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(80, xla);
		}
	}

	private boolean jj_2_82(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_82();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(81, xla);
		}
	}

	private boolean jj_2_83(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_83();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(82, xla);
		}
	}

	private boolean jj_2_84(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_84();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(83, xla);
		}
	}

	private boolean jj_3R_20() {
		if (jj_scan_token(LOOP))
			return true;
		if (jj_3R_26())
			return true;
		if (jj_scan_token(ENDLOOP))
			return true;
		return false;
	}

	private boolean jj_3_75() {
		if (jj_3R_41())
			return true;
		return false;
	}

	private boolean jj_3_74() {
		if (jj_3R_40())
			return true;
		return false;
	}

	private boolean jj_3_73() {
		if (jj_3R_39())
			return true;
		return false;
	}

	private boolean jj_3R_43() {
		if (jj_3R_11())
			return true;
		if (jj_scan_token(TAKES))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_12()) {
			jj_scanpos = xsp;
			if (jj_3_13())
				return true;
		}
		return false;
	}

	private boolean jj_3R_34() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_72()) {
			jj_scanpos = xsp;
			if (jj_3_73()) {
				jj_scanpos = xsp;
				if (jj_3_74()) {
					jj_scanpos = xsp;
					if (jj_3_75())
						return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3_72() {
		if (jj_3R_38())
			return true;
		return false;
	}

	private boolean jj_3_37() {
		if (jj_scan_token(ELSEIF))
			return true;
		if (jj_3R_15())
			return true;
		if (jj_scan_token(THEN))
			return true;
		if (jj_3R_26())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_35())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_25() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_36()) {
			jj_scanpos = xsp;
			if (jj_3_37())
				return true;
		}
		return false;
	}

	private boolean jj_3_36() {
		if (jj_scan_token(ELSE))
			return true;
		if (jj_3R_26())
			return true;
		return false;
	}

	private boolean jj_3_71() {
		if (jj_scan_token(56))
			return true;
		return false;
	}

	private boolean jj_3_70() {
		if (jj_3R_37())
			return true;
		return false;
	}

	private boolean jj_3_11() {
		if (jj_scan_token(CONSTANT))
			return true;
		return false;
	}

	private boolean jj_3_69() {
		if (jj_3R_36())
			return true;
		return false;
	}

	private boolean jj_3_68() {
		if (jj_3R_35())
			return true;
		return false;
	}

	private boolean jj_3R_33() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_67()) {
			jj_scanpos = xsp;
			if (jj_3_68()) {
				jj_scanpos = xsp;
				if (jj_3_69()) {
					jj_scanpos = xsp;
					if (jj_3_70()) {
						jj_scanpos = xsp;
						if (jj_3_71())
							return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_9() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_11())
			jj_scanpos = xsp;
		if (jj_scan_token(NATIVE))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	private boolean jj_3_67() {
		if (jj_3R_34())
			return true;
		return false;
	}

	private boolean jj_3_10() {
		if (jj_3R_13())
			return true;
		return false;
	}

	private boolean jj_3_34() {
		if (jj_3R_25())
			return true;
		return false;
	}

	private boolean jj_3_8() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_9()) {
			jj_scanpos = xsp;
			if (jj_3_10())
				return true;
		}
		return false;
	}

	private boolean jj_3_9() {
		if (jj_scan_token(CONSTANT))
			return true;
		if (jj_3R_12())
			return true;
		if (jj_3R_11())
			return true;
		if (jj_scan_token(37))
			return true;
		return false;
	}

	private boolean jj_3R_32() {
		if (jj_scan_token(FUNCTION))
			return true;
		if (jj_3R_11())
			return true;
		return false;
	}

	private boolean jj_3R_19() {
		if (jj_scan_token(IF))
			return true;
		if (jj_3R_15())
			return true;
		if (jj_scan_token(THEN))
			return true;
		if (jj_3R_26())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_34())
			jj_scanpos = xsp;
		if (jj_scan_token(ENDIF))
			return true;
		return false;
	}

	private boolean jj_3R_42() {
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_8()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_33() {
		if (jj_scan_token(38))
			return true;
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3R_31() {
		if (jj_3R_11())
			return true;
		if (jj_scan_token(39))
			return true;
		if (jj_3R_15())
			return true;
		if (jj_scan_token(40))
			return true;
		return false;
	}

	private boolean jj_3_66() {
		if (jj_3R_24())
			return true;
		return false;
	}

	private boolean jj_3R_24() {
		if (jj_3R_15())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_33()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_65() {
		if (jj_scan_token(55))
			return true;
		return false;
	}

	private boolean jj_3R_8() {
		if (jj_scan_token(GLOBALS))
			return true;
		if (jj_3R_42())
			return true;
		if (jj_scan_token(ENDGLOBALS))
			return true;
		return false;
	}

	private boolean jj_3_32() {
		if (jj_3R_24())
			return true;
		return false;
	}

	private boolean jj_3_64() {
		if (jj_scan_token(44))
			return true;
		return false;
	}

	private boolean jj_3_7() {
		if (jj_scan_token(HANDLE))
			return true;
		return false;
	}

	private boolean jj_3_63() {
		if (jj_scan_token(43))
			return true;
		return false;
	}

	private boolean jj_3R_29() {
		if (jj_3R_11())
			return true;
		if (jj_scan_token(41))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_66())
			jj_scanpos = xsp;
		if (jj_scan_token(42))
			return true;
		return false;
	}

	private boolean jj_3_6() {
		if (jj_3R_11())
			return true;
		return false;
	}

	private boolean jj_3R_18() {
		if (jj_scan_token(CALL))
			return true;
		if (jj_3R_11())
			return true;
		if (jj_scan_token(41))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_32())
			jj_scanpos = xsp;
		if (jj_scan_token(42))
			return true;
		return false;
	}

	private boolean jj_3_62() {
		if (jj_scan_token(54))
			return true;
		return false;
	}

	private boolean jj_3R_7() {
		if (jj_scan_token(TYPE))
			return true;
		if (jj_3R_11())
			return true;
		if (jj_scan_token(EXTENDS))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_6()) {
			jj_scanpos = xsp;
			if (jj_3_7())
				return true;
		}
		return false;
	}

	private boolean jj_3_61() {
		if (jj_scan_token(53))
			return true;
		return false;
	}

	private boolean jj_3R_30() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_63()) {
			jj_scanpos = xsp;
			if (jj_3_64()) {
				jj_scanpos = xsp;
				if (jj_3_65())
					return true;
			}
		}
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3_60() {
		if (jj_scan_token(52))
			return true;
		return false;
	}

	private boolean jj_3_31() {
		if (jj_scan_token(SET))
			return true;
		if (jj_3R_11())
			return true;
		if (jj_scan_token(39))
			return true;
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3_5() {
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3_59() {
		if (jj_scan_token(51))
			return true;
		return false;
	}

	private boolean jj_3_4() {
		if (jj_3R_9())
			return true;
		return false;
	}

	private boolean jj_3_3() {
		if (jj_3R_8())
			return true;
		return false;
	}

	private boolean jj_3_58() {
		if (jj_scan_token(50))
			return true;
		return false;
	}

	private boolean jj_3_2() {
		if (jj_3R_7())
			return true;
		return false;
	}

	private boolean jj_3_1() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_2()) {
			jj_scanpos = xsp;
			if (jj_3_3()) {
				jj_scanpos = xsp;
				if (jj_3_4()) {
					jj_scanpos = xsp;
					if (jj_3_5())
						return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3R_17() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_30()) {
			jj_scanpos = xsp;
			if (jj_3_31())
				return true;
		}
		return false;
	}

	private boolean jj_3_30() {
		if (jj_scan_token(SET))
			return true;
		if (jj_3R_11())
			return true;
		if (jj_scan_token(37))
			return true;
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3_57() {
		if (jj_scan_token(49))
			return true;
		return false;
	}

	private boolean jj_3_56() {
		if (jj_scan_token(48))
			return true;
		return false;
	}

	private boolean jj_3_55() {
		if (jj_scan_token(47))
			return true;
		return false;
	}

	private boolean jj_3_54() {
		if (jj_scan_token(46))
			return true;
		return false;
	}

	private boolean jj_3_53() {
		if (jj_scan_token(45))
			return true;
		return false;
	}

	private boolean jj_3_52() {
		if (jj_scan_token(44))
			return true;
		return false;
	}

	private boolean jj_3R_11() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		return false;
	}

	private boolean jj_3_51() {
		if (jj_scan_token(43))
			return true;
		return false;
	}

	private boolean jj_3_84() {
		if (jj_scan_token(69))
			return true;
		return false;
	}

	private boolean jj_3_29() {
		if (jj_3R_23())
			return true;
		return false;
	}

	private boolean jj_3_83() {
		if (jj_scan_token(68))
			return true;
		return false;
	}

	private boolean jj_3_28() {
		if (jj_3R_22())
			return true;
		return false;
	}

	private boolean jj_3_82() {
		if (jj_scan_token(67))
			return true;
		return false;
	}

	private boolean jj_3_27() {
		if (jj_3R_21())
			return true;
		return false;
	}

	private boolean jj_3_81() {
		if (jj_scan_token(66))
			return true;
		return false;
	}

	private boolean jj_3_26() {
		if (jj_3R_20())
			return true;
		return false;
	}

	private boolean jj_3_80() {
		if (jj_scan_token(HANDLE))
			return true;
		return false;
	}

	private boolean jj_3_25() {
		if (jj_3R_19())
			return true;
		return false;
	}

	private boolean jj_3_79() {
		if (jj_scan_token(65))
			return true;
		return false;
	}

	private boolean jj_3_24() {
		if (jj_3R_18())
			return true;
		return false;
	}

	private boolean jj_3R_16() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_23()) {
			jj_scanpos = xsp;
			if (jj_3_24()) {
				jj_scanpos = xsp;
				if (jj_3_25()) {
					jj_scanpos = xsp;
					if (jj_3_26()) {
						jj_scanpos = xsp;
						if (jj_3_27()) {
							jj_scanpos = xsp;
							if (jj_3_28()) {
								jj_scanpos = xsp;
								if (jj_3_29())
									return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_12() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_78()) {
			jj_scanpos = xsp;
			if (jj_3_79()) {
				jj_scanpos = xsp;
				if (jj_3_80()) {
					jj_scanpos = xsp;
					if (jj_3_81()) {
						jj_scanpos = xsp;
						if (jj_3_82()) {
							jj_scanpos = xsp;
							if (jj_3_83()) {
								jj_scanpos = xsp;
								if (jj_3_84())
									return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_78() {
		if (jj_3R_11())
			return true;
		return false;
	}

	private boolean jj_3_23() {
		if (jj_3R_17())
			return true;
		return false;
	}

	private boolean jj_3_22() {
		if (jj_3R_16())
			return true;
		return false;
	}

	private boolean jj_3R_27() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_51()) {
			jj_scanpos = xsp;
			if (jj_3_52()) {
				jj_scanpos = xsp;
				if (jj_3_53()) {
					jj_scanpos = xsp;
					if (jj_3_54()) {
						jj_scanpos = xsp;
						if (jj_3_55()) {
							jj_scanpos = xsp;
							if (jj_3_56()) {
								jj_scanpos = xsp;
								if (jj_3_57()) {
									jj_scanpos = xsp;
									if (jj_3_58()) {
										jj_scanpos = xsp;
										if (jj_3_59()) {
											jj_scanpos = xsp;
											if (jj_3_60()) {
												jj_scanpos = xsp;
												if (jj_3_61()) {
													jj_scanpos = xsp;
													if (jj_3_62())
														return true;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3_19() {
		if (jj_scan_token(37))
			return true;
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3R_26() {
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_22()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_28() {
		if (jj_scan_token(41))
			return true;
		if (jj_3R_15())
			return true;
		if (jj_scan_token(42))
			return true;
		return false;
	}

	private boolean jj_3_21() {
		if (jj_3R_12())
			return true;
		if (jj_scan_token(ARRAY))
			return true;
		if (jj_3R_11())
			return true;
		return false;
	}

	private boolean jj_3_50() {
		if (jj_3R_33())
			return true;
		return false;
	}

	private boolean jj_3_49() {
		if (jj_3R_11())
			return true;
		return false;
	}

	private boolean jj_3_48() {
		if (jj_3R_32())
			return true;
		return false;
	}

	private boolean jj_3_47() {
		if (jj_3R_31())
			return true;
		return false;
	}

	private boolean jj_3_46() {
		if (jj_3R_30())
			return true;
		return false;
	}

	private boolean jj_3_45() {
		if (jj_3R_29())
			return true;
		return false;
	}

	private boolean jj_3R_44() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_44()) {
			jj_scanpos = xsp;
			if (jj_3_45()) {
				jj_scanpos = xsp;
				if (jj_3_46()) {
					jj_scanpos = xsp;
					if (jj_3_47()) {
						jj_scanpos = xsp;
						if (jj_3_48()) {
							jj_scanpos = xsp;
							if (jj_3_49()) {
								jj_scanpos = xsp;
								if (jj_3_50())
									return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_13() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_20()) {
			jj_scanpos = xsp;
			if (jj_3_21())
				return true;
		}
		return false;
	}

	private boolean jj_3_20() {
		if (jj_3R_12())
			return true;
		if (jj_3R_11())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_19())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3_44() {
		if (jj_3R_28())
			return true;
		return false;
	}

	private boolean jj_3R_37() {
		if (jj_scan_token(STRING_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3_43() {
		if (jj_3R_27())
			return true;
		return false;
	}

	private boolean jj_3_42() {
		if (jj_3R_20())
			return true;
		return false;
	}

	private boolean jj_3_18() {
		if (jj_scan_token(LOCAL))
			return true;
		if (jj_3R_13())
			return true;
		return false;
	}

	private boolean jj_3_41() {
		if (jj_3R_19())
			return true;
		return false;
	}

	private boolean jj_3_40() {
		if (jj_3R_18())
			return true;
		return false;
	}

	private boolean jj_3_39() {
		if (jj_3R_17())
			return true;
		return false;
	}

	private boolean jj_3R_15() {
		if (jj_3R_44())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_43())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3_77() {
		if (jj_scan_token(63))
			return true;
		return false;
	}

	private boolean jj_3R_36() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_76()) {
			jj_scanpos = xsp;
			if (jj_3_77())
				return true;
		}
		return false;
	}

	private boolean jj_3_76() {
		if (jj_scan_token(62))
			return true;
		return false;
	}

	private boolean jj_3R_35() {
		if (jj_scan_token(REALCONST))
			return true;
		return false;
	}

	private boolean jj_3R_23() {
		if (jj_scan_token(DEBUG))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_39()) {
			jj_scanpos = xsp;
			if (jj_3_40()) {
				jj_scanpos = xsp;
				if (jj_3_41()) {
					jj_scanpos = xsp;
					if (jj_3_42())
						return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3_17() {
		if (jj_scan_token(CONSTANT))
			return true;
		return false;
	}

	private boolean jj_3_38() {
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3R_10() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_17())
			jj_scanpos = xsp;
		if (jj_scan_token(FUNCTION))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	private boolean jj_3R_41() {
		if (jj_scan_token(FOURCCINT))
			return true;
		return false;
	}

	private boolean jj_3_16() {
		if (jj_scan_token(38))
			return true;
		if (jj_3R_12())
			return true;
		if (jj_3R_11())
			return true;
		return false;
	}

	private boolean jj_3R_22() {
		if (jj_scan_token(RETURN))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_38())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_40() {
		if (jj_scan_token(HEXINT))
			return true;
		return false;
	}

	private boolean jj_3R_14() {
		if (jj_3R_12())
			return true;
		if (jj_3R_11())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_16()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_21() {
		if (jj_scan_token(EXITWHEN))
			return true;
		if (jj_3R_15())
			return true;
		return false;
	}

	private boolean jj_3R_39() {
		if (jj_scan_token(OCTALINT))
			return true;
		return false;
	}

	private boolean jj_3_15() {
		if (jj_3R_12())
			return true;
		return false;
	}

	private boolean jj_3_14() {
		if (jj_scan_token(NOTHING))
			return true;
		return false;
	}

	private boolean jj_3_13() {
		if (jj_3R_14())
			return true;
		return false;
	}

	private boolean jj_3_35() {
		if (jj_3R_25())
			return true;
		return false;
	}

	private boolean jj_3R_38() {
		if (jj_scan_token(DECIMALINT))
			return true;
		return false;
	}

	private boolean jj_3_12() {
		if (jj_scan_token(NOTHING))
			return true;
		return false;
	}

	/** Generated Token Manager. */
	public JASSParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[0];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
		jj_la1_init_2();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] {};
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] {};
	}

	private static void jj_la1_init_2() {
		jj_la1_2 = new int[] {};
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[84];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public JASSParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public JASSParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new JASSParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public JASSParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new JASSParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public JASSParser(JASSParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(JASSParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (JJCalls jj_2_rtn : jj_2_rtns) {
					JJCalls c = jj_2_rtn;
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	@SuppressWarnings("serial")
	static private final class LookaheadSuccess extends java.lang.Error {

		/**
		 *
		 */
		private static final long serialVersionUID = -6118824892743315463L;
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null)
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			else
				jj_lastpos = jj_scanpos = jj_scanpos.next;
		} else
			jj_scanpos = jj_scanpos.next;
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++)
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		return t;
	}

	private int jj_ntk_f() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1)
			jj_lasttokens[jj_endpos++] = kind;
		else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++)
				jj_expentry[i] = jj_lasttokens[i];
			jj_entries_loop: for (Object name : jj_expentries) {
				int[] oldentry = (int[]) (name);
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++)
						if (oldentry[i] != jj_expentry[i])
							continue jj_entries_loop;
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[71];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++)
			if (jj_la1[i] == jj_gen)
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0)
						la1tokens[j] = true;
					if ((jj_la1_1[i] & (1 << j)) != 0)
						la1tokens[32 + j] = true;
					if ((jj_la1_2[i] & (1 << j)) != 0)
						la1tokens[64 + j] = true;
				}
		for (int i = 0; i < 71; i++)
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++)
			exptokseq[i] = jj_expentries.get(i);
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 84; i++)
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						case 11:
							jj_3_12();
							break;
						case 12:
							jj_3_13();
							break;
						case 13:
							jj_3_14();
							break;
						case 14:
							jj_3_15();
							break;
						case 15:
							jj_3_16();
							break;
						case 16:
							jj_3_17();
							break;
						case 17:
							jj_3_18();
							break;
						case 18:
							jj_3_19();
							break;
						case 19:
							jj_3_20();
							break;
						case 20:
							jj_3_21();
							break;
						case 21:
							jj_3_22();
							break;
						case 22:
							jj_3_23();
							break;
						case 23:
							jj_3_24();
							break;
						case 24:
							jj_3_25();
							break;
						case 25:
							jj_3_26();
							break;
						case 26:
							jj_3_27();
							break;
						case 27:
							jj_3_28();
							break;
						case 28:
							jj_3_29();
							break;
						case 29:
							jj_3_30();
							break;
						case 30:
							jj_3_31();
							break;
						case 31:
							jj_3_32();
							break;
						case 32:
							jj_3_33();
							break;
						case 33:
							jj_3_34();
							break;
						case 34:
							jj_3_35();
							break;
						case 35:
							jj_3_36();
							break;
						case 36:
							jj_3_37();
							break;
						case 37:
							jj_3_38();
							break;
						case 38:
							jj_3_39();
							break;
						case 39:
							jj_3_40();
							break;
						case 40:
							jj_3_41();
							break;
						case 41:
							jj_3_42();
							break;
						case 42:
							jj_3_43();
							break;
						case 43:
							jj_3_44();
							break;
						case 44:
							jj_3_45();
							break;
						case 45:
							jj_3_46();
							break;
						case 46:
							jj_3_47();
							break;
						case 47:
							jj_3_48();
							break;
						case 48:
							jj_3_49();
							break;
						case 49:
							jj_3_50();
							break;
						case 50:
							jj_3_51();
							break;
						case 51:
							jj_3_52();
							break;
						case 52:
							jj_3_53();
							break;
						case 53:
							jj_3_54();
							break;
						case 54:
							jj_3_55();
							break;
						case 55:
							jj_3_56();
							break;
						case 56:
							jj_3_57();
							break;
						case 57:
							jj_3_58();
							break;
						case 58:
							jj_3_59();
							break;
						case 59:
							jj_3_60();
							break;
						case 60:
							jj_3_61();
							break;
						case 61:
							jj_3_62();
							break;
						case 62:
							jj_3_63();
							break;
						case 63:
							jj_3_64();
							break;
						case 64:
							jj_3_65();
							break;
						case 65:
							jj_3_66();
							break;
						case 66:
							jj_3_67();
							break;
						case 67:
							jj_3_68();
							break;
						case 68:
							jj_3_69();
							break;
						case 69:
							jj_3_70();
							break;
						case 70:
							jj_3_71();
							break;
						case 71:
							jj_3_72();
							break;
						case 72:
							jj_3_73();
							break;
						case 73:
							jj_3_74();
							break;
						case 74:
							jj_3_75();
							break;
						case 75:
							jj_3_76();
							break;
						case 76:
							jj_3_77();
							break;
						case 77:
							jj_3_78();
							break;
						case 78:
							jj_3_79();
							break;
						case 79:
							jj_3_80();
							break;
						case 80:
							jj_3_81();
							break;
						case 81:
							jj_3_82();
							break;
						case 82:
							jj_3_83();
							break;
						case 83:
							jj_3_84();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
